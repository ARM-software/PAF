# SPDX-FileCopyrightText: <text>Copyright 2024 Arm Limited and/or its
# affiliates <open-source-office@arm.com></text>
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This file is part of PAF, the Physical Attack Framework.

name: "Ubuntu 24.04 (x86 + arm) (gcc + clang)"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CMAKE_BUILD_TYPE: Debug

jobs:
  configure_build_test_doc_with_clang_x86:
    name: "(x86, clang) Configure, build, test + build doc"
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    - name: apt update
      run: sudo apt-get update
    - name: Install dependencies for apps with a GUI, doxygen and Ninja
      run: sudo apt-get install pkg-config libwxgtk3.2-dev doxygen graphviz ninja-build
    - name: Configure
      run: CC=clang CXX=clang++ cmake -B ${{github.workspace}}/build-clang-x86 -DCMAKE_BUILD_TYPE:STRING=${{env.CMAKE_BUILD_TYPE}} -DPAF_BUILD_DOCUMENTATION:BOOL=ON -G Ninja
    - name: Build
      working-directory: ${{github.workspace}}/build-clang-x86
      run: ninja
    - name: Test
      working-directory: ${{github.workspace}}/build-clang-x86
      run: ninja check
    - name: Documentation
      working-directory: ${{github.workspace}}/build-clang-x86
      run: ninja doc

  configure_build_test_doc_with_gcc_x86:
    name: "(x86, gcc) Configure, build, test + build doc"
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    - name: apt update
      run: sudo apt-get update
    - name: Install dependencies for apps with a GUI, doxygen and Ninja
      run: sudo apt-get install pkg-config libwxgtk3.2-dev doxygen graphviz ninja-build
    - name: Configure
      run: CC=gcc CXX=g++ cmake -B ${{github.workspace}}/build-gcc-x86 -DCMAKE_BUILD_TYPE:STRING=${{env.CMAKE_BUILD_TYPE}} -DPAF_BUILD_DOCUMENTATION:BOOL=ON -G Ninja
    - name: Build with gcc
      working-directory: ${{github.workspace}}/build-gcc-x86
      run: ninja
    - name: Test
      working-directory: ${{github.workspace}}/build-gcc-x86
      run: ninja check
    - name: Documentation
      working-directory: ${{github.workspace}}/build-gcc-x86
      run: ninja doc

  configure_build_test_doc_with_clang_arm:
    name: "(arm, clang) Configure, build, test + build doc"
    runs-on: ubuntu-24.04-arm
    steps:
    - uses: actions/checkout@v4
    - name: apt update
      run: sudo apt-get update
    - name: Install dependencies for apps with a GUI, doxygen and Ninja
      run: sudo apt-get install pkg-config libwxgtk3.2-dev doxygen graphviz ninja-build
    - name: Configure
      run: CC=clang CXX=clang++ cmake -B ${{github.workspace}}/build-clang-arm -DCMAKE_BUILD_TYPE:STRING=${{env.CMAKE_BUILD_TYPE}} -DPAF_BUILD_DOCUMENTATION:BOOL=ON -G Ninja
    - name: Build
      working-directory: ${{github.workspace}}/build-clang-arm
      run: ninja
    - name: Test
      working-directory: ${{github.workspace}}/build-clang-arm
      run: ninja check
    - name: Documentation
      working-directory: ${{github.workspace}}/build-clang-arm
      run: ninja doc

  configure_build_test_doc_with_gcc_arm:
    name: "(arm, gcc) Configure, build, test + build doc"
    runs-on: ubuntu-24.04-arm
    steps:
    - uses: actions/checkout@v4
    - name: apt update
      run: sudo apt-get update
    - name: Install dependencies for apps with a GUI, doxygen and Ninja
      run: sudo apt-get install pkg-config libwxgtk3.2-dev doxygen graphviz ninja-build
    - name: Configure
      run: CC=gcc CXX=g++ cmake -B ${{github.workspace}}/build-gcc-arm -DCMAKE_BUILD_TYPE:STRING=${{env.CMAKE_BUILD_TYPE}} -DPAF_BUILD_DOCUMENTATION:BOOL=ON -G Ninja
    - name: Build with gcc
      working-directory: ${{github.workspace}}/build-gcc-arm
      run: ninja
    - name: Test
      working-directory: ${{github.workspace}}/build-gcc-arm
      run: ninja check
    - name: Documentation
      working-directory: ${{github.workspace}}/build-gcc-arm
      run: ninja doc

